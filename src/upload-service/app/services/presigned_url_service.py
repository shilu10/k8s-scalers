"""
s3_multipart_upload.py

This module handles multipart uploads to Amazon S3 using pre-signed URLs. It allows clients
to upload large files directly to S3 without passing through the backend server.

Main Features:
- Initiates a multipart upload to get an UploadId.
- Calculates the number of parts based on file size.
- Generates pre-signed URLs for each part of the file.

Dependencies:
- boto3
- Flask (for configuration and logging)
- Custom core modules: get_s3_client, calculate_parts, and error handling classes.
"""

import boto3
import os
from botocore.exceptions import ClientError
from flask import current_app as app, jsonify

from ..core.s3 import get_s3_client
from ..core.errors import ClientErrorException, ValueErrorException
from ..core.utils import calculate_parts


def initiate_multipart_upload(s3_client, bucket_name, object_path):
    """
    Initiates a multipart upload on S3 for a given object path.

    Args:
        s3_client (boto3.client): The Boto3 S3 client.
        bucket_name (str): Name of the S3 bucket.
        object_path (str): Full S3 object key (e.g., 'user@example.com/filename').

    Returns:
        str: The UploadId generated by S3 for the multipart upload.
    """
    app.logger.info("Initiating multipart upload for: %s", object_path)
    response = s3_client.create_multipart_upload(
        Bucket=bucket_name,
        Key=object_path
    )
    app.logger.debug("UploadId received: %s", response['UploadId'])
    return response['UploadId']


def generate_presigned_urls(s3_client, bucket_name, object_path, upload_id, part_count):
    """
    Generates pre-signed URLs for each part of the multipart upload.

    Args:
        s3_client (boto3.client): The Boto3 S3 client.
        bucket_name (str): Name of the S3 bucket.
        object_path (str): Full S3 object key.
        upload_id (str): The UploadId for the multipart upload.
        part_count (int): Number of parts to divide the file into.

    Returns:
        list of dict: A list of dictionaries, each containing:
            - 'partNumber' (int): The part number.
            - 'url' (str): The pre-signed URL for uploading this part.
    """
    urls = []
    for part_number in range(1, part_count + 1):
        url = s3_client.generate_presigned_url(
            ClientMethod='upload_part',
            Params={
                'Bucket': bucket_name,
                'Key': object_path,
                'UploadId': upload_id,
                'PartNumber': part_number,
            },
            ExpiresIn=app.config.get("PRESIGNED_URL_EXPIRATION")
        )
        urls.append({'partNumber': part_number, 'url': url})
        app.logger.debug("Generated URL for part %s", part_number)
    return urls


def generate(file_name, email, file_size):
    """
    Orchestrates the multipart upload setup and generates pre-signed URLs.

    Steps:
    - Creates the S3 object path using email and file name.
    - Initializes the S3 client.
    - Initiates a multipart upload and gets UploadId.
    - Calculates number of parts from file size.
    - Generates pre-signed URLs for each part.

    Args:
        file_name (str): The name of the file to upload.
        email (str): The email of the user (used for namespacing the object path).
        file_size (int): Size of the file in bytes.

    Returns:
        dict: A dictionary containing:
            - 'uploadId' (str): S3 UploadId for the multipart upload.
            - 'parts' (list): List of pre-signed URLs for each part.
            - 'fileUrl' (str): Public S3 URL for the final uploaded file.

    Raises:
        ClientErrorException: If AWS SDK raises a ClientError.
        ValueErrorException: If an invalid file size or argument is provided.
    """
    object_path = os.path.join(email, file_name)
    app.logger.info("Object Path Creation Started: %s", object_path)
    bucket_name = app.config.get("OBJECT_STORE_BUCKET_NAME")

    s3_client = get_s3_client()
    app.logger.info("Initialized S3 Client")

    try:
        # Step 1: Initiate the multipart upload and get UploadId
        upload_id = initiate_multipart_upload(s3_client, bucket_name, object_path)

        # Step 2: Generate pre-signed URLs for each part
        part_counts = calculate_parts(file_size=file_size)
        app.logger.info("Number of parts calculated: %s", part_counts)
        presigned_urls = generate_presigned_urls(
            s3_client, bucket_name, object_path, upload_id, part_count=part_counts
        )

        app.logger.info("PreSigned URLs Generated for: %s", email)
        return {
            "uploadId": upload_id,
            "parts": presigned_urls,
            "fileUrl": f"https://{bucket_name}.s3.amazonaws.com/{object_path}"
        }

    except ClientError as e:
        app.logger.warning("AWS ClientError: %s", e)
        raise ClientErrorException(e)

    except ValueError as e:
        app.logger.warning("Invalid file size or input: %s", e)
        raise ValueErrorException(e)
